%%%-------------------------------------------------------------------
%%% @author Mr. Pi <mrpi@mr-pi.de>
%%% @copyright 2013 Mr. Pi
%%% @doc
%%% provides eunit tests for httpStatusCodes
%%% @end
%%%-------------------------------------------------------------------
-module(httpStatusCodes_tests).
-include_lib("eunit/include/eunit.hrl").

-export([]).


getDescription_simple_test() ->
	?assertEqual(<<"Continue">>,httpStatusCodes:getDescription(100)),
	?assertEqual(<<"Switching Protocols">>,httpStatusCodes:getDescription(101)),
	?assertEqual(<<"Processing">>,httpStatusCodes:getDescription(102)),
	?assertEqual(<<"OK">>,httpStatusCodes:getDescription(200)),
	?assertEqual(<<"Created">>,httpStatusCodes:getDescription(201)),
	?assertEqual(<<"Accepted">>,httpStatusCodes:getDescription(202)),
	?assertEqual(<<"Non-Authoritative Information">>,httpStatusCodes:getDescription(203)),
	?assertEqual(<<"No Content">>,httpStatusCodes:getDescription(204)),
	?assertEqual(<<"Reset Content">>,httpStatusCodes:getDescription(205)),
	?assertEqual(<<"Partial Content">>,httpStatusCodes:getDescription(206)),
	?assertEqual(<<"Multi-Status">>,httpStatusCodes:getDescription(207)),
	?assertEqual(<<"Already Reported">>,httpStatusCodes:getDescription(208)),
	?assertEqual(<<"IM Used">>,httpStatusCodes:getDescription(226)),
	?assertEqual(<<"Multiple Choices">>,httpStatusCodes:getDescription(300)),
	?assertEqual(<<"Moved Permanently">>,httpStatusCodes:getDescription(301)),
	?assertEqual(<<"Found">>,httpStatusCodes:getDescription(302)),
	?assertEqual(<<"See Other">>,httpStatusCodes:getDescription(303)),
	?assertEqual(<<"Not Modified">>,httpStatusCodes:getDescription(304)),
	?assertEqual(<<"Use Proxy">>,httpStatusCodes:getDescription(305)),
	?assertEqual(<<"Reserved">>,httpStatusCodes:getDescription(306)),
	?assertEqual(<<"Temporary Redirect">>,httpStatusCodes:getDescription(307)),
	?assertEqual(<<"Permanent Redirect">>,httpStatusCodes:getDescription(308)),
	?assertEqual(<<"Bad Request">>,httpStatusCodes:getDescription(400)),
	?assertEqual(<<"Unauthorized">>,httpStatusCodes:getDescription(401)),
	?assertEqual(<<"Payment Required">>,httpStatusCodes:getDescription(402)),
	?assertEqual(<<"Forbidden">>,httpStatusCodes:getDescription(403)),
	?assertEqual(<<"Not Found">>,httpStatusCodes:getDescription(404)),
	?assertEqual(<<"Method Not Allowed">>,httpStatusCodes:getDescription(405)),
	?assertEqual(<<"Not Acceptable">>,httpStatusCodes:getDescription(406)),
	?assertEqual(<<"Proxy Authentication Required">>,httpStatusCodes:getDescription(407)),
	?assertEqual(<<"Request Timeout">>,httpStatusCodes:getDescription(408)),
	?assertEqual(<<"Conflict">>,httpStatusCodes:getDescription(409)),
	?assertEqual(<<"Gone">>,httpStatusCodes:getDescription(410)),
	?assertEqual(<<"Length Required">>,httpStatusCodes:getDescription(411)),
	?assertEqual(<<"Precondition Failed">>,httpStatusCodes:getDescription(412)),
	?assertEqual(<<"Request Entity Too Large">>,httpStatusCodes:getDescription(413)),
	?assertEqual(<<"Request-URI Too Long">>,httpStatusCodes:getDescription(414)),
	?assertEqual(<<"Unsupported Media Type">>,httpStatusCodes:getDescription(415)),
	?assertEqual(<<"Requested Range Not Satisfiable">>,httpStatusCodes:getDescription(416)),
	?assertEqual(<<"Expectation Failed">>,httpStatusCodes:getDescription(417)),
	?assertEqual(<<"Unprocessable Entity">>,httpStatusCodes:getDescription(422)),
	?assertEqual(<<"Locked">>,httpStatusCodes:getDescription(423)),
	?assertEqual(<<"Failed Dependency">>,httpStatusCodes:getDescription(424)),
	?assertEqual(<<"Upgrade Required">>,httpStatusCodes:getDescription(426)),
	?assertEqual(<<"Precondition Required">>,httpStatusCodes:getDescription(428)),
	?assertEqual(<<"Too Many Requests">>,httpStatusCodes:getDescription(429)),
	?assertEqual(<<"Request Header Fields Too Large">>,httpStatusCodes:getDescription(431)),
	?assertEqual(<<"Internal Server Error">>,httpStatusCodes:getDescription(500)),
	?assertEqual(<<"Not Implemented">>,httpStatusCodes:getDescription(501)),
	?assertEqual(<<"Bad Gateway">>,httpStatusCodes:getDescription(502)),
	?assertEqual(<<"Service Unavailable">>,httpStatusCodes:getDescription(503)),
	?assertEqual(<<"Gateway Timeout">>,httpStatusCodes:getDescription(504)),
	?assertEqual(<<"HTTP Version Not Supported">>,httpStatusCodes:getDescription(505)),
	?assertEqual(<<"Variant Also Negotiates (Experimental)">>,httpStatusCodes:getDescription(506)),
	?assertEqual(<<"Insufficient Storage">>,httpStatusCodes:getDescription(507)),
	?assertEqual(<<"Loop Detected">>,httpStatusCodes:getDescription(508)),
	?assertEqual(<<"Not Extended">>,httpStatusCodes:getDescription(510)),
	?assertEqual(<<"Network Authentication Required">>,httpStatusCodes:getDescription(511)).


getDescription_extended_test() ->
	?assertThrow(undefined,httpStatusCodes:getDescription(99)),
	?assertThrow(undefined,httpStatusCodes:getDescription(-23)),
	?assertThrow(undefined,httpStatusCodes:getDescription(600)),
	?assertThrow(undefined,httpStatusCodes:getDescription(923439)),
	?assertThrow(undefined,httpStatusCodes:getDescription(dsfs)),
	?assertThrow(undefined,httpStatusCodes:getDescription("214")),
	?assertEqual(<<"Unassigned">>,httpStatusCodes:getDescription(593)).


getReference_simple_test() ->
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(100)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(101)),
	?assertEqual(<<"RFC2518">>,httpStatusCodes:getReference(102)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(200)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(201)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(202)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(203)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(204)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(205)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(206)),
	?assertEqual(<<"RFC4918">>,httpStatusCodes:getReference(207)),
	?assertEqual(<<"RFC5842">>,httpStatusCodes:getReference(208)),
	?assertEqual(<<"RFC3229">>,httpStatusCodes:getReference(226)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(300)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(301)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(302)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(303)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(304)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(305)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(306)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(307)),
	?assertEqual(<<"RFC-reschke-http-status-308-07">>,httpStatusCodes:getReference(308)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(400)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(401)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(402)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(403)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(404)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(405)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(406)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(407)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(408)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(409)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(410)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(411)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(412)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(413)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(414)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(415)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(416)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(417)),
	?assertEqual(<<"RFC4918">>,httpStatusCodes:getReference(422)),
	?assertEqual(<<"RFC4918">>,httpStatusCodes:getReference(423)),
	?assertEqual(<<"RFC4918">>,httpStatusCodes:getReference(424)),
	?assertEqual(<<"RFC2817">>,httpStatusCodes:getReference(426)),
	?assertEqual(<<"RFC6585">>,httpStatusCodes:getReference(428)),
	?assertEqual(<<"RFC6585">>,httpStatusCodes:getReference(429)),
	?assertEqual(<<"RFC6585">>,httpStatusCodes:getReference(431)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(500)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(501)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(502)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(503)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(504)),
	?assertEqual(<<"RFC2616">>,httpStatusCodes:getReference(505)),
	?assertEqual(<<"RFC2295">>,httpStatusCodes:getReference(506)),
	?assertEqual(<<"RFC4918">>,httpStatusCodes:getReference(507)),
	?assertEqual(<<"RFC5842">>,httpStatusCodes:getReference(508)),
	?assertEqual(<<"RFC2774">>,httpStatusCodes:getReference(510)),
	?assertEqual(<<"RFC6585">>,httpStatusCodes:getReference(511)).


getReference_extended_test() ->
	?assertThrow(undefined,httpStatusCodes:getReference(99)),
	?assertThrow(undefined,httpStatusCodes:getReference(-23)),
	?assertThrow(undefined,httpStatusCodes:getReference(600)),
	?assertThrow(undefined,httpStatusCodes:getReference(923439)),
	?assertThrow(undefined,httpStatusCodes:getReference(dsfs)),
	?assertThrow(undefined,httpStatusCodes:getReference("214")),
	?assertEqual(<<"">>,httpStatusCodes:getReference(598)).


getHttpStatus_simple_test() ->
	?assertEqual({100,<<"Continue">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(100)),
	?assertEqual({101,<<"Switching Protocols">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(101)),
	?assertEqual({102,<<"Processing">>,<<"RFC2518">>},httpStatusCodes:getHttpStatus(102)),
	?assertEqual({200,<<"OK">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(200)),
	?assertEqual({201,<<"Created">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(201)),
	?assertEqual({202,<<"Accepted">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(202)),
	?assertEqual({203,<<"Non-Authoritative Information">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(203)),
	?assertEqual({204,<<"No Content">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(204)),
	?assertEqual({205,<<"Reset Content">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(205)),
	?assertEqual({206,<<"Partial Content">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(206)),
	?assertEqual({207,<<"Multi-Status">>,<<"RFC4918">>},httpStatusCodes:getHttpStatus(207)),
	?assertEqual({208,<<"Already Reported">>,<<"RFC5842">>},httpStatusCodes:getHttpStatus(208)),
	?assertEqual({226,<<"IM Used">>,<<"RFC3229">>},httpStatusCodes:getHttpStatus(226)),
	?assertEqual({300,<<"Multiple Choices">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(300)),
	?assertEqual({301,<<"Moved Permanently">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(301)),
	?assertEqual({302,<<"Found">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(302)),
	?assertEqual({303,<<"See Other">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(303)),
	?assertEqual({304,<<"Not Modified">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(304)),
	?assertEqual({305,<<"Use Proxy">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(305)),
	?assertEqual({306,<<"Reserved">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(306)),
	?assertEqual({307,<<"Temporary Redirect">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(307)),
	?assertEqual({308,<<"Permanent Redirect">>,<<"RFC-reschke-http-status-308-07">>},httpStatusCodes:getHttpStatus(308)),
	?assertEqual({400,<<"Bad Request">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(400)),
	?assertEqual({401,<<"Unauthorized">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(401)),
	?assertEqual({402,<<"Payment Required">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(402)),
	?assertEqual({403,<<"Forbidden">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(403)),
	?assertEqual({404,<<"Not Found">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(404)),
	?assertEqual({405,<<"Method Not Allowed">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(405)),
	?assertEqual({406,<<"Not Acceptable">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(406)),
	?assertEqual({407,<<"Proxy Authentication Required">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(407)),
	?assertEqual({408,<<"Request Timeout">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(408)),
	?assertEqual({409,<<"Conflict">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(409)),
	?assertEqual({410,<<"Gone">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(410)),
	?assertEqual({411,<<"Length Required">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(411)),
	?assertEqual({412,<<"Precondition Failed">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(412)),
	?assertEqual({413,<<"Request Entity Too Large">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(413)),
	?assertEqual({414,<<"Request-URI Too Long">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(414)),
	?assertEqual({415,<<"Unsupported Media Type">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(415)),
	?assertEqual({416,<<"Requested Range Not Satisfiable">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(416)),
	?assertEqual({417,<<"Expectation Failed">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(417)),
	?assertEqual({422,<<"Unprocessable Entity">>,<<"RFC4918">>},httpStatusCodes:getHttpStatus(422)),
	?assertEqual({423,<<"Locked">>,<<"RFC4918">>},httpStatusCodes:getHttpStatus(423)),
	?assertEqual({424,<<"Failed Dependency">>,<<"RFC4918">>},httpStatusCodes:getHttpStatus(424)),
	?assertEqual({426,<<"Upgrade Required">>,<<"RFC2817">>},httpStatusCodes:getHttpStatus(426)),
	?assertEqual({428,<<"Precondition Required">>,<<"RFC6585">>},httpStatusCodes:getHttpStatus(428)),
	?assertEqual({429,<<"Too Many Requests">>,<<"RFC6585">>},httpStatusCodes:getHttpStatus(429)),
	?assertEqual({431,<<"Request Header Fields Too Large">>,<<"RFC6585">>},httpStatusCodes:getHttpStatus(431)),
	?assertEqual({500,<<"Internal Server Error">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(500)),
	?assertEqual({501,<<"Not Implemented">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(501)),
	?assertEqual({502,<<"Bad Gateway">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(502)),
	?assertEqual({503,<<"Service Unavailable">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(503)),
	?assertEqual({504,<<"Gateway Timeout">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(504)),
	?assertEqual({505,<<"HTTP Version Not Supported">>,<<"RFC2616">>},httpStatusCodes:getHttpStatus(505)),
	?assertEqual({506,<<"Variant Also Negotiates (Experimental)">>,<<"RFC2295">>},httpStatusCodes:getHttpStatus(506)),
	?assertEqual({507,<<"Insufficient Storage">>,<<"RFC4918">>},httpStatusCodes:getHttpStatus(507)),
	?assertEqual({508,<<"Loop Detected">>,<<"RFC5842">>},httpStatusCodes:getHttpStatus(508)),
	?assertEqual({510,<<"Not Extended">>,<<"RFC2774">>},httpStatusCodes:getHttpStatus(510)),
	?assertEqual({511,<<"Network Authentication Required">>,<<"RFC6585">>},httpStatusCodes:getHttpStatus(511)).


getHttpStatus_extended_test() ->
	?assertThrow(undefined,httpStatusCodes:getHttpStatus(99)),
	?assertThrow(undefined,httpStatusCodes:getHttpStatus(-23)),
	?assertThrow(undefined,httpStatusCodes:getHttpStatus(600)),
	?assertThrow(undefined,httpStatusCodes:getHttpStatus(923439)),
	?assertThrow(undefined,httpStatusCodes:getHttpStatus(dsfs)),
	?assertThrow(undefined,httpStatusCodes:getHttpStatus("214")),
	?assertEqual({598,<<"Unassigned">>,<<"">>},httpStatusCodes:getHttpStatus(598)).

